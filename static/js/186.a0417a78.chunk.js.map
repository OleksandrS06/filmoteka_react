{"version":3,"file":"static/js/186.a0417a78.chunk.js","mappings":"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","sources":["components/Loader/Loader.jsx","components/Reviews/Reviews.jsx","services/api.js"],"sourcesContent":["import { CirclesWithBar } from 'react-loader-spinner';\n\nconst Loader = () => {\n  return (\n    <CirclesWithBar\n      height=\"100\"\n      width=\"100\"\n      color=\"#077728\"\n      visible={true}\n      outerCircleColor=\"#094677\"\n      innerCircleColor=\"#c0119a\"\n      barColor=\"#bbce0b\"\n      ariaLabel=\"circles-with-bar-loading\"\n    />\n  );\n};\n\nexport default Loader;\n","import Loader from 'components/Loader/Loader';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { getReviews } from 'services/api';\n\nconst Reviews = () => {\n  const [film, setFilm] = useState([]);\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(true);\n\n  const { moviesId } = useParams();\n\n  useEffect(() => {\n    async function fetchMovie() {\n      setError('');\n      try {\n        const filmDetails = await getReviews(moviesId);\n        setFilm(filmDetails);\n      } catch (error) {\n        setError('something went wrong');\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    fetchMovie();\n  }, [moviesId]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {error && <p>{error}</p>}\n      {film.length > 0 ? (\n        <ul>\n          {film.map(({ author, content, id }) => {\n            return (\n              <li key={id}>\n                Author: <span>{author}</span>\n                <p>{content}</p>\n              </li>\n            );\n          })}\n        </ul>\n      ) : (\n        <p>'Looks like there are no reviews at the moment'</p>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\nimport noImage from '../assets/images/noImage.jpeg';\n\nconst API_KEY = '13b039c8ea964a53c22455b956eb62e0';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = { api_key: API_KEY };\n\nexport async function getTrendingFilms() {\n  const { data } = await axios.get('/trending/movie/week');\n  return data.results.map(el => {\n    return {\n      original_title: el.original_title,\n      id: el.id,\n      poster_path: poster_pathUrl(el.poster_path),\n      vote_average: voteAveragePercent(el.vote_average),\n    };\n  });\n}\nexport async function getMovieDetails(movieId) {\n  const { data } = await axios.get(`/movie/${movieId}`);\n  const { original_title, vote_average, overview, poster_path, genres } = data;\n  return {\n    original_title,\n    vote_average: voteAveragePercent(vote_average),\n    overview,\n    poster_path: poster_pathUrl(poster_path),\n    genres: getMovieGenres(genres),\n  };\n}\nexport async function getCastInfo(movieId) {\n  const { data } = await axios.get(`/movie/${movieId}/credits`);\n  return data.cast;\n}\nexport async function getReviews(movieId) {\n  const { data } = await axios.get(`/movie/${movieId}/reviews`);\n  return data.results;\n}\nexport async function getMovieByQuery(query) {\n  const { data } = await axios.get(`/search/movie`, {\n    params: {\n      query,\n    },\n  });\n  return data.results.map(el => {\n    return {\n      original_title: el.original_title,\n      id: el.id,\n      poster_path: poster_pathUrl(el.poster_path),\n      vote_average: voteAveragePercent(el.vote_average),\n    };\n  });\n}\n\nexport const poster_pathUrl = url => {\n  return url ? `https://image.tmdb.org/t/p/w500${url}` : noImage;\n};\n\nexport const getMovieGenres = genres => {\n  if (!genres) return;\n  return genres\n    .map(genre => {\n      return genre.name + ',';\n    })\n    .join(' ');\n};\n\nconst voteAveragePercent = vote_average => {\n  return Math.round(vote_average * 10);\n};\n"],"names":["height","width","color","visible","outerCircleColor","innerCircleColor","barColor","ariaLabel","useState","film","setFilm","error","setError","isLoading","setIsLoading","moviesId","useParams","useEffect","getReviews","filmDetails","fetchMovie","length","map","author","content","id","getTrendingFilms","axios","data","results","el","original_title","poster_path","poster_pathUrl","vote_average","voteAveragePercent","getMovieDetails","movieId","overview","genres","getMovieGenres","getCastInfo","cast","getMovieByQuery","query","params","api_key","url","noImage","genre","name","join","Math","round"],"sourceRoot":""}