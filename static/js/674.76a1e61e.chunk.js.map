{"version":3,"file":"static/js/674.76a1e61e.chunk.js","mappings":"4JAiBA,IAfe,WACb,OACE,SAAC,KAAD,CACEA,OAAO,MACPC,MAAM,MACNC,MAAM,UACNC,SAAS,EACTC,iBAAiB,UACjBC,iBAAiB,UACjBC,SAAS,UACTC,UAAU,4BAGf,C,+ECdD,EAA6B,+BAA7B,EAA+E,qCAA/E,EAAiI,+BAAjI,EAAoL,sC,SC0BpL,EAvBmB,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACdC,GAAWC,EAAAA,EAAAA,MAEjB,OADAC,QAAQC,IAAIJ,IAEV,eAAIK,UAAWC,EAAf,SACGN,EAAMO,KAAI,YAAwD,IAArDC,EAAoD,EAApDA,eAAgBC,EAAoC,EAApCA,GAAIC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAC7C,OACE,eAAaN,UAAWC,EAAxB,UACE,UAAC,KAAD,CAAMM,GAAE,kBAAaH,GAAMI,MAAO,CAAEC,KAAMb,GAA1C,WACE,gBAAKc,IAAKL,EAAaM,IAAI,YAE3B,iBAAKX,UAAWC,EAAhB,WACE,cAAGD,UAAWC,EAAd,SAAsCE,KACtC,eAAGH,UAAWC,EAAd,mBAA4CK,YANzCF,EAWZ,KAGN,C,gKCxBD,EAA0B,0BAA1B,EAA8D,0B,SC4C9D,EArCiB,WACf,OAA0BQ,EAAAA,EAAAA,UAAS,IAAnC,eAAOjB,EAAP,KAAckB,EAAd,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,IAAnC,eAAOI,EAAP,KAAcC,EAAd,KAsBA,OApBAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,2FACED,EAAS,IADX,mBAG4BE,EAAAA,EAAAA,MAH5B,OAGUC,EAHV,OAIIP,EAASO,GAJb,gDAMIH,EAAS,wBANb,yBAQIF,GAAa,GARjB,6EADc,uBAAC,WAAD,wBAYdM,EACD,GAAE,KAEHH,EAAAA,EAAAA,YAAU,WACHF,GACLM,EAAAA,GAAAA,MAAYN,EACb,GAAE,CAACA,KAGF,oBAAShB,UAAWC,EAApB,UACE,4BACE,eAAID,UAAWC,EAAf,mCACCN,EAAM4B,OAAS,IAAK,SAACC,EAAA,EAAD,CAAY7B,MAAOA,IACvCmB,IAAa,SAACW,EAAA,EAAD,IACbT,IAAS,uBAAIA,QAIrB,C,qOCpCM,SAAeG,IAAtB,4CAAO,OAAP,oBAAO,sGACkBO,EAAAA,EAAAA,IAAU,wBAD5B,uBACGC,EADH,EACGA,KADH,kBAEEA,EAAKC,QAAQ1B,KAAI,SAAA2B,GACtB,MAAO,CACL1B,eAAgB0B,EAAG1B,eACnBC,GAAIyB,EAAGzB,GACPC,YAAayB,EAAeD,EAAGxB,aAC/BC,aAAcyB,EAAmBF,EAAGvB,cAEvC,KATI,kEAWA,SAAe0B,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,mGACkBP,EAAAA,EAAAA,IAAA,iBAAoBO,IADtC,uBACGN,EADH,EACGA,KACAxB,EAAgEwB,EAAhExB,eAAgBG,EAAgDqB,EAAhDrB,aAAc4B,EAAkCP,EAAlCO,SAAU7B,EAAwBsB,EAAxBtB,YAAa8B,EAAWR,EAAXQ,OAFxD,kBAGE,CACLhC,eAAAA,EACAG,aAAcyB,EAAmBzB,GACjC4B,SAAAA,EACA7B,YAAayB,EAAezB,GAC5B8B,OAAQC,EAAeD,KARpB,kEAWA,SAAeE,EAAtB,+CAAO,OAAP,oBAAO,WAA2BJ,GAA3B,yFACkBP,EAAAA,EAAAA,IAAA,iBAAoBO,EAApB,aADlB,uBACGN,EADH,EACGA,KADH,kBAEEA,EAAKW,MAFP,kEAIA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA0BN,GAA1B,yFACkBP,EAAAA,EAAAA,IAAA,iBAAoBO,EAApB,aADlB,uBACGN,EADH,EACGA,KADH,kBAEEA,EAAKC,SAFP,kEAIA,SAAeY,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,yFACkBf,EAAAA,EAAAA,IAAA,gBAA2B,CAChDgB,OAAQ,CACND,MAAAA,KAHC,uBACGd,EADH,EACGA,KADH,kBAMEA,EAAKC,QAAQ1B,KAAI,SAAA2B,GACtB,MAAO,CACL1B,eAAgB0B,EAAG1B,eACnBC,GAAIyB,EAAGzB,GACPC,YAAayB,EAAeD,EAAGxB,aAC/BC,aAAcyB,EAAmBF,EAAGvB,cAEvC,KAbI,kEAjCPoB,EAAAA,EAAAA,SAAAA,QAAyB,+BACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CAAEiB,QAFV,oCAkDT,IAAMb,EAAiB,SAAAc,GAC5B,OAAOA,EAAG,yCAAqCA,GAAQC,CACxD,EAEYT,EAAiB,SAAAD,GAC5B,GAAKA,EACL,OAAOA,EACJjC,KAAI,SAAA4C,GACH,OAAOA,EAAMC,KAAO,GACrB,IACAC,KAAK,IACT,EAEKjB,EAAqB,SAAAzB,GACzB,OAAO2C,KAAKC,MAAqB,GAAf5C,EACnB,C","sources":["components/Loader/Loader.jsx","webpack://react-homework-template/./src/components/MoviesList/MoviesList.module.css?de3d","components/MoviesList/MoviesList.jsx","webpack://react-homework-template/./src/pages/HomePage/HomePage.module.css?5baa","pages/HomePage/HomePage.jsx","services/api.js"],"sourcesContent":["import { CirclesWithBar } from 'react-loader-spinner';\n\nconst Loader = () => {\n  return (\n    <CirclesWithBar\n      height=\"100\"\n      width=\"100\"\n      color=\"#077728\"\n      visible={true}\n      outerCircleColor=\"#094677\"\n      innerCircleColor=\"#c0119a\"\n      barColor=\"#bbce0b\"\n      ariaLabel=\"circles-with-bar-loading\"\n    />\n  );\n};\n\nexport default Loader;\n","// extracted by mini-css-extract-plugin\nexport default {\"moviesList\":\"MoviesList_moviesList__P6SP5\",\"moviesList__item\":\"MoviesList_moviesList__item__6884X\",\"card__info\":\"MoviesList_card__info__nGMfE\",\"card__text__slide\":\"MoviesList_card__text__slide__BUC62\"};","import { Link, useLocation } from 'react-router-dom';\n\nimport css from '../MoviesList/MoviesList.module.css';\n\nconst MoviesList = ({ films }) => {\n  const location = useLocation();\n  console.log(films);\n  return (\n    <ul className={css.moviesList}>\n      {films.map(({ original_title, id, poster_path, vote_average }) => {\n        return (\n          <li key={id} className={css.moviesList__item}>\n            <Link to={`/movies/${id}`} state={{ from: location }}>\n              <img src={poster_path} alt=\"poster\" />\n\n              <div className={css.card__info}>\n                <p className={css.card__text__slide}>{original_title}</p>\n                <p className={css.card__text__slide}>Rate: {vote_average}</p>\n              </div>\n            </Link>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default MoviesList;\n","// extracted by mini-css-extract-plugin\nexport default {\"section\":\"HomePage_section__bINJC\",\"heading\":\"HomePage_heading__-NidW\"};","import { useState, useEffect } from 'react';\nimport { getTrendingFilms } from 'services/api';\nimport MoviesList from 'components/MoviesList/MoviesList';\n\nimport Loader from 'components/Loader/Loader';\nimport { toast } from 'react-toastify';\nimport css from '../HomePage/HomePage.module.css';\n\nconst HomePage = () => {\n  const [films, setFilms] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    async function fetchMovies() {\n      setError('');\n      try {\n        const filmsData = await getTrendingFilms();\n        setFilms(filmsData);\n      } catch (error) {\n        setError('something went wrong');\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    fetchMovies();\n  }, []);\n\n  useEffect(() => {\n    if (!error) return;\n    toast.error(error);\n  }, [error]);\n\n  return (\n    <section className={css.section}>\n      <div>\n        <h1 className={css.heading}>TRENDING MOVIES TODAY</h1>\n        {films.length > 0 && <MoviesList films={films} />}\n        {isLoading && <Loader />}\n        {error && <p>{error}</p>}\n      </div>\n    </section>\n  );\n};\n\nexport default HomePage;\n","import axios from 'axios';\nimport noImage from '../assets/images/noImage.jpeg';\n\nconst API_KEY = '13b039c8ea964a53c22455b956eb62e0';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = { api_key: API_KEY };\n\nexport async function getTrendingFilms() {\n  const { data } = await axios.get('/trending/movie/week');\n  return data.results.map(el => {\n    return {\n      original_title: el.original_title,\n      id: el.id,\n      poster_path: poster_pathUrl(el.poster_path),\n      vote_average: voteAveragePercent(el.vote_average),\n    };\n  });\n}\nexport async function getMovieDetails(movieId) {\n  const { data } = await axios.get(`/movie/${movieId}`);\n  const { original_title, vote_average, overview, poster_path, genres } = data;\n  return {\n    original_title,\n    vote_average: voteAveragePercent(vote_average),\n    overview,\n    poster_path: poster_pathUrl(poster_path),\n    genres: getMovieGenres(genres),\n  };\n}\nexport async function getCastInfo(movieId) {\n  const { data } = await axios.get(`/movie/${movieId}/credits`);\n  return data.cast;\n}\nexport async function getReviews(movieId) {\n  const { data } = await axios.get(`/movie/${movieId}/reviews`);\n  return data.results;\n}\nexport async function getMovieByQuery(query) {\n  const { data } = await axios.get(`/search/movie`, {\n    params: {\n      query,\n    },\n  });\n  return data.results.map(el => {\n    return {\n      original_title: el.original_title,\n      id: el.id,\n      poster_path: poster_pathUrl(el.poster_path),\n      vote_average: voteAveragePercent(el.vote_average),\n    };\n  });\n}\n\nexport const poster_pathUrl = url => {\n  return url ? `https://image.tmdb.org/t/p/w500${url}` : noImage;\n};\n\nexport const getMovieGenres = genres => {\n  if (!genres) return;\n  return genres\n    .map(genre => {\n      return genre.name + ',';\n    })\n    .join(' ');\n};\n\nconst voteAveragePercent = vote_average => {\n  return Math.round(vote_average * 10);\n};\n"],"names":["height","width","color","visible","outerCircleColor","innerCircleColor","barColor","ariaLabel","films","location","useLocation","console","log","className","css","map","original_title","id","poster_path","vote_average","to","state","from","src","alt","useState","setFilms","isLoading","setIsLoading","error","setError","useEffect","getTrendingFilms","filmsData","fetchMovies","toast","length","MoviesList","Loader","axios","data","results","el","poster_pathUrl","voteAveragePercent","getMovieDetails","movieId","overview","genres","getMovieGenres","getCastInfo","cast","getReviews","getMovieByQuery","query","params","api_key","url","noImage","genre","name","join","Math","round"],"sourceRoot":""}