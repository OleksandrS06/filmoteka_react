{"version":3,"file":"static/js/76.1f9fd8e7.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.jsx","components/Loader/Loader.jsx","services/api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"castList\":\"Cast_castList__ARoWn\",\"castList__item\":\"Cast_castList__item__dndbM\",\"castList__image\":\"Cast_castList__image__t9WBe\"};","import { useParams } from 'react-router-dom';\nimport { getCastInfo } from 'services/api';\nimport { useState, useEffect } from 'react';\nimport { poster_pathUrl } from 'services/api';\nimport Loader from 'components/Loader/Loader';\nimport css from '../Cast/Cast.module.css';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(true);\n\n  const { moviesId } = useParams();\n\n  useEffect(() => {\n    async function fetchCast() {\n      setError('');\n      try {\n        const castInfo = await getCastInfo(moviesId);\n        setCast(castInfo);\n      } catch (error) {\n        setError('something went wrong');\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    fetchCast();\n  }, [moviesId]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {error && <p>{error}</p>}\n      {cast.length > 0 ? (\n        <ul className={css.castList}>\n          {cast.map(({ character, original_name, profile_path, cast_id }) => {\n            return (\n              <li key={cast_id} className={css.castList__item}>\n                <img\n                  src={poster_pathUrl(profile_path)}\n                  className={css.castList__image}\n                  alt=\"poster\"\n                />\n                <p>{original_name}</p>\n                <p>Character:{character}</p>\n              </li>\n            );\n          })}\n        </ul>\n      ) : (\n        'Looks like there are no cast to show'\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import { CirclesWithBar } from 'react-loader-spinner';\n\nconst Loader = () => {\n  return (\n    <CirclesWithBar\n      height=\"100\"\n      width=\"100\"\n      color=\"#077728\"\n      visible={true}\n      outerCircleColor=\"#094677\"\n      innerCircleColor=\"#c0119a\"\n      barColor=\"#bbce0b\"\n      ariaLabel=\"circles-with-bar-loading\"\n    />\n  );\n};\n\nexport default Loader;\n","import axios from 'axios';\nimport noImage from '../assets/images/noImage.jpeg';\n\nconst API_KEY = '13b039c8ea964a53c22455b956eb62e0';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = { api_key: API_KEY };\n\nexport async function getTrendingFilms() {\n  const { data } = await axios.get('/trending/movie/week');\n  return data.results.map(el => {\n    return {\n      original_title: el.original_title,\n      id: el.id,\n      poster_path: poster_pathUrl(el.poster_path),\n      vote_average: voteAveragePercent(el.vote_average),\n    };\n  });\n}\nexport async function getMovieDetails(movieId) {\n  const { data } = await axios.get(`/movie/${movieId}`);\n  const { original_title, vote_average, overview, poster_path, genres } = data;\n  return {\n    original_title,\n    vote_average: voteAveragePercent(vote_average),\n    overview,\n    poster_path: poster_pathUrl(poster_path),\n    genres: getMovieGenres(genres),\n  };\n}\nexport async function getCastInfo(movieId) {\n  const { data } = await axios.get(`/movie/${movieId}/credits`);\n  return data.cast;\n}\nexport async function getReviews(movieId) {\n  const { data } = await axios.get(`/movie/${movieId}/reviews`);\n  return data.results;\n}\nexport async function getMovieByQuery(query) {\n  const { data } = await axios.get(`/search/movie`, {\n    params: {\n      query,\n    },\n  });\n  return data.results.map(el => {\n    return {\n      original_title: el.original_title,\n      id: el.id,\n      poster_path: poster_pathUrl(el.poster_path),\n      vote_average: voteAveragePercent(el.vote_average),\n    };\n  });\n}\n\nexport const poster_pathUrl = url => {\n  return url ? `https://image.tmdb.org/t/p/w500${url}` : noImage;\n};\n\nexport const getMovieGenres = genres => {\n  if (!genres) return;\n  return genres\n    .map(genre => {\n      return genre.name + ',';\n    })\n    .join(' ');\n};\n\nconst voteAveragePercent = vote_average => {\n  return Math.round(vote_average * 10);\n};\n"],"names":["useState","cast","setCast","error","setError","isLoading","setIsLoading","moviesId","useParams","useEffect","getCastInfo","castInfo","fetchCast","Loader","length","className","css","map","character","original_name","profile_path","cast_id","src","poster_pathUrl","alt","height","width","color","visible","outerCircleColor","innerCircleColor","barColor","ariaLabel","getTrendingFilms","axios","data","results","el","original_title","id","poster_path","vote_average","voteAveragePercent","getMovieDetails","movieId","overview","genres","getMovieGenres","getReviews","getMovieByQuery","query","params","api_key","url","noImage","genre","name","join","Math","round"],"sourceRoot":""}