{"version":3,"file":"static/js/278.c1eb52f1.chunk.js","mappings":"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","sources":["components/Loader/Loader.jsx","webpack://react-homework-template/./src/components/MoviesList/MoviesList.module.css?de3d","components/MoviesList/MoviesList.jsx","pages/Movies/Movies.jsx","services/api.js"],"sourcesContent":["import { CirclesWithBar } from 'react-loader-spinner';\n\nconst Loader = () => {\n  return (\n    <CirclesWithBar\n      height=\"100\"\n      width=\"100\"\n      color=\"#077728\"\n      visible={true}\n      outerCircleColor=\"#094677\"\n      innerCircleColor=\"#c0119a\"\n      barColor=\"#bbce0b\"\n      ariaLabel=\"circles-with-bar-loading\"\n    />\n  );\n};\n\nexport default Loader;\n","// extracted by mini-css-extract-plugin\nexport default {\"moviesList\":\"MoviesList_moviesList__P6SP5\",\"moviesList__item\":\"MoviesList_moviesList__item__6884X\",\"card__info\":\"MoviesList_card__info__nGMfE\",\"card__text__slide\":\"MoviesList_card__text__slide__BUC62\"};","import { Link, useLocation } from 'react-router-dom';\n\nimport css from '../MoviesList/MoviesList.module.css';\n\nconst MoviesList = ({ films }) => {\n  const location = useLocation();\n  return (\n    <ul className={css.moviesList}>\n      {films.map(({ original_title, id, poster_path, vote_average }) => {\n        return (\n          <li key={id} className={css.moviesList__item}>\n            <Link to={`/movies/${id}`} state={{ from: location }}>\n              <img src={poster_path} alt=\"poster\" />\n\n              <div className={css.card__info}>\n                <p className={css.card__text__slide}>{original_title}</p>\n                <p className={css.card__text__slide}>Rate: {vote_average}</p>\n              </div>\n            </Link>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default MoviesList;\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { getMovieByQuery } from 'services/api';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport Loader from 'components/Loader/Loader';\n\nconst Movies = () => {\n  const [error, setError] = useState('');\n  const [films, setFilms] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  let request = searchParams.get('searchParams') ?? '';\n\n  useEffect(() => {\n    if (!request) return;\n\n    async function fetchMovie() {\n      try {\n        setIsLoading(true);\n        const filmDetails = await getMovieByQuery(request);\n        setFilms(filmDetails);\n      } catch (error) {\n        setError('something went wrong');\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    fetchMovie();\n  }, [request]);\n  const submitHandler = e => {\n    e.preventDefault();\n    const searchParams = e.target.query.value.trim().toLowerCase();\n    if (!searchParams) return;\n    setSearchParams({ searchParams });\n  };\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      <div>\n        <form onSubmit={submitHandler}>\n          <label>\n            <input type={'text'} name=\"query\" />\n            <button type=\"submit\">SEARCH</button>\n          </label>\n        </form>\n      </div>\n      {films.length > 0 && <MoviesList films={films} />}\n      {error && <p>{error}</p>}\n    </>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\nimport noImage from '../assets/images/noImage.jpeg';\n\nconst API_KEY = '13b039c8ea964a53c22455b956eb62e0';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = { api_key: API_KEY };\n\nexport async function getTrendingFilms() {\n  const { data } = await axios.get('/trending/movie/week');\n  return data.results.map(el => {\n    return {\n      original_title: el.original_title,\n      id: el.id,\n      poster_path: poster_pathUrl(el.poster_path),\n      vote_average: voteAveragePercent(el.vote_average),\n    };\n  });\n}\nexport async function getMovieDetails(movieId) {\n  const { data } = await axios.get(`/movie/${movieId}`);\n  const { original_title, vote_average, overview, poster_path, genres } = data;\n  return {\n    original_title,\n    vote_average: voteAveragePercent(vote_average),\n    overview,\n    poster_path: poster_pathUrl(poster_path),\n    genres: getMovieGenres(genres),\n  };\n}\nexport async function getCastInfo(movieId) {\n  const { data } = await axios.get(`/movie/${movieId}/credits`);\n  return data.cast;\n}\nexport async function getReviews(movieId) {\n  const { data } = await axios.get(`/movie/${movieId}/reviews`);\n  return data.results;\n}\nexport async function getMovieByQuery(query) {\n  const { data } = await axios.get(`/search/movie`, {\n    params: {\n      query,\n    },\n  });\n  return data.results.map(el => {\n    return {\n      original_title: el.original_title,\n      id: el.id,\n      poster_path: poster_pathUrl(el.poster_path),\n      vote_average: voteAveragePercent(el.vote_average),\n    };\n  });\n}\n\nexport const poster_pathUrl = url => {\n  return url ? `https://image.tmdb.org/t/p/w500${url}` : noImage;\n};\n\nexport const getMovieGenres = genres => {\n  if (!genres) return;\n  return genres\n    .map(genre => {\n      return genre.name + ',';\n    })\n    .join(' ');\n};\n\nconst voteAveragePercent = vote_average => {\n  return Math.round(vote_average * 10);\n};\n"],"names":["height","width","color","visible","outerCircleColor","innerCircleColor","barColor","ariaLabel","films","location","useLocation","className","css","map","original_title","id","poster_path","vote_average","to","state","from","src","alt","useState","error","setError","setFilms","isLoading","setIsLoading","useSearchParams","searchParams","setSearchParams","request","get","useEffect","getMovieByQuery","filmDetails","fetchMovie","onSubmit","e","preventDefault","target","query","value","trim","toLowerCase","type","name","length","getTrendingFilms","axios","data","results","el","poster_pathUrl","voteAveragePercent","getMovieDetails","movieId","overview","genres","getMovieGenres","getCastInfo","cast","getReviews","params","api_key","url","noImage","genre","join","Math","round"],"sourceRoot":""}